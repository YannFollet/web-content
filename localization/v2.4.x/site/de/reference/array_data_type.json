{"codeList":["import random\n\ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(1000):\n    current_color = random.choice(colors)\n    current_tag = random.randint(1000, 9999)\n    current_coord = [ random.randint(0, 40) for _ in range(random.randint(3, 5)) ]\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"color_tag\": current_tag,\n        \"color_coord\": current_coord,\n    })\n\nprint(data[0])\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport java.util.*;\n\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JsonObject> data = new ArrayList<>();\n\nGson gson = new Gson();\nRandom rand = new Random();\nfor (int i=0; i<1000; i++) {\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    Integer current_tag = rand.nextInt(8999) + 1000;\n\n    // Generate an random-sized array\n    int capacity = rand.nextInt(5) + 1;\n    List<Integer> current_coord = new ArrayList<>();\n    for (int j=0; j<capacity; j++) {\n        current_coord.add(rand.nextInt(40));\n    }\n\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"color_tag\", current_tag);\n    row.add(\"color_coord\", gson.toJsonTree(current_coord));\n    data.add(row);\n}\n\nSystem.out.println(data.get(0));\n","const colors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"];\nlet data = [];\n\nfor (let i = 0; i < 1000; i++) {\n    const current_color = colors[Math.floor(Math.random() * colors.length)];\n    const current_tag = Math.floor(Math.random() * 8999 + 1000);\n    const current_coord = Array(Math.floor(Math.random() * 5 + 1)).fill(0).map(() => Math.floor(Math.random() * 40));\n\n    data.push({\n        id: i,\n        vector: Array(5).fill(0).map(() => Math.random()),\n        color: current_color,\n        color_tag: current_tag,\n        color_coord: current_coord,\n    });\n}\n\nconsole.log(data[0]);\n","{\n    id: 0,\n    vector: [\n        0.0338537420906162,\n        0.6844108238358322,\n        0.28410588909961754,\n        0.09752595400212116,\n        0.22671013058761114\n    ],\n    color: 'orange',\n    color_tag: 5677,\n    color_coord: [ 3, 0, 18, 29 ]\n}\n","from pymilvus import MilvusClient, DataType\n\nSERVER_ADDR = \"http://localhost:19530\"\n\nclient = MilvusClient(uri=SERVER_ADDR)\n","import io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.collection.request.*;\nimport io.milvus.v2.service.index.request.CreateIndexReq;\nimport io.milvus.v2.service.vector.request.*;\nimport io.milvus.v2.service.vector.response.*;\n\nString SERVER_ADDR = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(SERVER_ADDR)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\n// Connect to Milvus server\nconst address = \"http://localhost:19530\";\n\nconst milvusClient = new MilvusClient({address: address});\n","schema = client.create_schema(auto_id=False, enable_dynamic_field=False)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\nschema.add_field(field_name=\"color\", datatype=DataType.VARCHAR, max_length=512)\nschema.add_field(field_name=\"color_tag\", datatype=DataType.INT64)\nschema.add_field(field_name=\"color_coord\", datatype=DataType.ARRAY, element_type=DataType.INT64, max_capacity=5)\n","// Create schema\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\n// Add fields to schema\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(false)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"color\")\n        .dataType(DataType.VarChar)\n        .maxLength(512)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"color_tag\")\n        .dataType(DataType.Int64)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"color_coord\")\n        .dataType(DataType.Array)\n        .elementType(DataType.Int64)\n        .maxCapacity(5)\n        .build());\n","const fields = [\n    {\n        name: \"id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        auto_id: false\n    },\n    {\n        name: \"vector\",\n        data_type: DataType.FloatVector,\n        dim: 5\n    },\n    {\n        name: \"color\",\n        data_type: DataType.VarChar,\n        max_length: 512\n    },\n    {\n        name: \"color_tag\",\n        data_type: DataType.Int64,\n    },\n    {\n        name: \"color_coord\",\n        data_type: DataType.Array,\n        element_type: DataType.Int64,\n        max_capacity: 5\n    }\n];\n","client.create_collection(collection_name=\"test_collection\", schema=schema)\nclient.list_collections()\n\n# Output:\n# ['test_collection']\n","CreateCollectionReq customizedSetupReq = CreateCollectionReq.builder()\n    .collectionName(\"test_collection\")\n    .collectionSchema(schema)\n    .build();\n\nclient.createCollection(customizedSetupReq);\n","await client.createCollection({\n    collection_name: \"test_collection\",\n    fields: fields\n});\n\nconst res = await client.listCollections({collection_name: \"test_collection\"});\n\nconsole.log(\"Existing collections: \" + res.collection_names);\n\n// Output:\n// Existing collections: test_collection\n","index_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"vector\",\n    metric_type=\"COSINE\",\n    index_type=\"IVF_FLAT\",\n    index_name=\"vector_index\",\n    params={\"nlist\": 128}\n)\n\nclient.create_index(collection_name=\"test_collection\", index_params=index_params)\nclient.describe_index(collection_name=\"test_collection\", index_name=\"vector_index\")\n\n# Output:\n# {'nlist': '128',\n#  'index_type': 'IVF_FLAT',\n#  'metric_type': 'COSINE',\n#  'field_name': 'vector',\n#  'index_name': 'vector_index'}\n","IndexParam indexParam = IndexParam.builder()\n        .metricType(IndexParam.MetricType.COSINE)\n        .indexType(IndexParam.IndexType.IVF_FLAT)\n        .fieldName(\"vector\")\n        .indexName(\"vector_index\")\n        .build();\nCreateIndexReq createIndexReq = CreateIndexReq.builder()\n        .collectionName(\"test_collection\")\n        .indexParams(Collections.singletonList(indexParam))\n        .build();\nclient.createIndex(createIndexReq);\n","await client.createIndex({\n    collection_name: \"test_collection\",\n    field_name: \"vector\",\n    index_type: \"IVF_FLAT\",\n    metric_type: \"COSINE\",   \n    index_name: \"vector_index\",\n    params: { \"nlist\": 128 }\n});\n\nres = await client.describeIndex({\n    collection_name: \"test_collection\",\n    index_name: \"vector_index\"\n});\n\nconsole.log(\"Vector index description: \" + JSON.stringify(res));\n\n// Output:\n// Vector index description: {\"index_descriptions\":[{\"params\":[{\"key\":\"params\",\"value\":\"{\\\"nlist\\\":128}\"},{\"key\":\"index_type\",\"value\":\"IVF_FLAT\"},{\"key\":\"metric_type\",\"value\":\"COSINE\"}],\"index_name\":\"vector_index\",\"indexID\":\"451543183233666062\",\"field_name\":\"vector\",\"indexed_rows\":\"0\",\"total_rows\":\"0\",\"state\":\"Finished\",\"index_state_fail_reason\":\"\",\"pending_index_rows\":\"0\"}],\"status\":{\"extra_info\":{},\"error_code\":\"Success\",\"reason\":\"\",\"code\":0,\"retriable\":false,\"detail\":\"\"}}\n","index_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"color_coord\",\n    index_type=\"INVERTED\",\n    index_name=\"inverted_index\"\n)\n\nclient.create_index(collection_name=\"test_collection\", index_params=index_params)\nclient.describe_index(collection_name=\"test_collection\", index_name=\"inverted_index\")\n\n# Output:\n# {'index_type': 'INVERTED',\n#  'field_name': 'color_coord',\n#  'index_name': 'inverted_index'}\n","indexParam = IndexParam.builder()\n        .indexType(IndexParam.IndexType.INVERTED)\n        .fieldName(\"color_coord\")\n        .indexName(\"inverted_index\")\n        .build();\ncreateIndexReq = CreateIndexReq.builder()\n        .collectionName(\"test_collection\")\n        .indexParams(Collections.singletonList(indexParam))\n        .build();\nclient.createIndex(createIndexReq);\n","await client.createIndex({\n    collection_name: \"test_collection\",\n    field_name: \"color_coord\",\n    index_type: \"INVERTED\",\n    index_name: \"inverted_index\"\n});\n\nres = await client.describeIndex({\n    collection_name: \"test_collection\",\n    index_name: \"inverted_index\"\n});\n\nconsole.log(\"Array index description: \" + JSON.stringify(res));\n\n// Output:\n// Array index description: {\"index_descriptions\":[{\"params\":[{\"key\":\"index_type\",\"value\":\"INVERTED\"}],\"index_name\":\"inverted_index\",\"indexID\":\"451543183233667243\",\"field_name\":\"color_coord\",\"indexed_rows\":\"0\",\"total_rows\":\"0\",\"state\":\"Finished\",\"index_state_fail_reason\":\"\",\"pending_index_rows\":\"0\"}],\"status\":{\"extra_info\":{},\"error_code\":\"Success\",\"reason\":\"\",\"code\":0,\"retriable\":false,\"detail\":\"\"}}\n","res = client.insert(collection_name=\"test_collection\", data=data)\nprint(res)\n\n# Output:\n# {'insert_count': 1000, 'ids': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999], 'cost': 0}\n","InsertReq insertReq = InsertReq.builder()\n    .collectionName(\"test_collection\")\n    .data(data)\n    .build();\n\nInsertResp insertResp = client.insert(insertReq);\n","res = await client.insert({\n    collection_name: \"test_collection\",\n    data: data\n});\n\nconsole.log(`Inserted ${res.insert_cnt} entities`);\n\n// Output:\n// Inserted 1000 entities\n","client.load_collection('test_collection')\n","LoadCollectionReq loadCollectionReq = LoadCollectionReq.builder()\n        .collectionName(\"test_collection\")\n        .build();\nclient.loadCollection(loadCollectionReq);\n","await client.loadCollection({\n    collection_name: \"test_collection\"\n});\n\nres = await client.getLoadState({\n    collection_name: \"test_collection\"\n});\n\nconsole.log(\"Collection load state: \" + res.state);\n\n// Output:\n// Collection load state: LoadStateLoaded\n","# 4. Basic search with the array field\nquery_vectors = [ [ random.uniform(-1, 1) for _ in range(5) ]]\n\nres = client.search(\n    collection_name=\"test_collection\",\n    data=query_vectors,\n    filter=\"color_coord[0] < 10\",\n    search_params={\n        \"metric_type\": \"COSINE\",\n        \"params\": {\"nprobe\": 16}\n    },\n    output_fields=[\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit=3\n)\n\nprint(res)\n\n# Output:\n# data: [\"[{'id': 918, 'distance': 0.974249541759491, 'entity': {'color_coord': [4, 34, 9, 18, 29], 'id': 918, 'color': 'purple', 'color_tag': 2940}}, {'id': 822, 'distance': 0.9177230000495911, 'entity': {'color_coord': [7, 36, 32], 'id': 822, 'color': 'red', 'color_tag': 8519}}, {'id': 981, 'distance': 0.9116519689559937, 'entity': {'color_coord': [7, 16, 40, 32, 32], 'id': 981, 'color': 'pink', 'color_tag': 2992}}]\"] , extra_info: {'cost': 0}\n","// 4. Basic search with an Array field\nQueryReq queryReq = QueryReq.builder()\n        .collectionName(\"test_collection\")\n        .filter(\"color_coord[0] in [7, 8, 9]\")\n        .outputFields(Arrays.asList(\"id\", \"color\", \"color_tag\", \"color_coord\"))\n        .limit(3L)\n        .build();\n\nQueryResp queryResp = client.query(queryReq);\n\nSystem.out.println(queryResp.getQueryResults());\n\n// Output:\n// [\n//  QueryResp.QueryResult(entity={color=black, color_tag=6107, id=8, color_coord=[8, 19, 31, 10]}), \n//  QueryResp.QueryResult(entity={color=blue, color_tag=3252, id=11, color_coord=[7, 16, 1]}),\n//  QueryResp.QueryResult(entity={color=blue, color_tag=3069, id=16, color_coord=[9, 16, 19]})\n// ]\n","const query_vectors = [Array(5).fill(0).map(() => Math.random())];\n\nres = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: \"color_coord[0] < 10\",\n    output_fields: [\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit: 3,\n    metric_type: \"COSINE\"\n});\n\nconsole.log(\"Search result: \" + JSON.stringify(res));\n\n// Output:\n// Search result: [\n//     {\n//         \"score\": 0.9969238042831421,\n//         \"id\": \"212\",\n//         \"color\": \"green\",\n//         \"color_tag\": \"5603\",\n//         \"color_coord\": [\n//             \"9\",\n//             \"14\",\n//             \"22\",\n//             \"4\",\n//             \"35\"\n//         ]\n//     },\n//     {\n//         \"score\": 0.9952742457389832,\n//         \"id\": \"339\",\n//         \"color\": \"yellow\",\n//         \"color_tag\": \"8867\",\n//         \"color_coord\": [\n//             \"8\",\n//             \"0\",\n//             \"6\",\n//             \"19\",\n//             \"23\"\n//         ]\n//     },\n//     {\n//         \"score\": 0.9944050312042236,\n//         \"id\": \"24\",\n//         \"color\": \"red\",\n//         \"color_tag\": \"7686\",\n//         \"color_coord\": [\n//             \"6\",\n//             \"17\",\n//             \"6\",\n//             \"32\"\n//         ]\n//     }\n// ]\n","# 5. Advanced query within the array field\n\nres = client.query(\n    collection_name=\"test_collection\",\n    filter=\"ARRAY_CONTAINS(color_coord, 10)\",\n    output_fields=[\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit=3\n)\n\nprint(res)\n\n# Output:\n# data: [\"{'id': 2, 'color': 'green', 'color_tag': 3676, 'color_coord': [26, 37, 30, 10]}\", \"{'id': 28, 'color': 'red', 'color_tag': 4735, 'color_coord': [30, 10, 40, 34]}\", \"{'id': 32, 'color': 'green', 'color_tag': 8816, 'color_coord': [10, 9, 24, 39]}\"] , extra_info: {'cost': 0}\n","// 5. Advanced query within an Array field\nqueryReq = QueryReq.builder()\n        .collectionName(\"test_collection\")\n        .filter(\"ARRAY_CONTAINS(color_coord, 10)\")\n        .outputFields(Arrays.asList(\"id\", \"color\", \"color_tag\", \"color_coord\"))\n        .limit(3)\n        .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(queryResp.getQueryResults());\n\n// Output:\n// [\n//    QueryResp.QueryResult(entity={color=black, color_tag=6107, id=8, color_coord=[8, 19, 31, 10]}), \n//    QueryResp.QueryResult(entity={color=brown, color_tag=7727, id=17, color_coord=[1, 10, 16, 29]}), \n//    QueryResp.QueryResult(entity={color=orange, color_tag=8128, id=26, color_coord=[10, 16, 3, 3]})\n// ]\n","// 5. Advanced search within the array field\nres = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: \"ARRAY_CONTAINS(color_coord, 10)\",\n    output_fields: [\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 1.7962548732757568,\n//         \"id\": \"696\",\n//         \"color\": \"red\",\n//         \"color_tag\": \"1798\",\n//         \"color_coord\": [\n//             \"33\",\n//             \"10\",\n//             \"37\"\n//         ]\n//     },\n//     {\n//         \"score\": 1.7126177549362183,\n//         \"id\": \"770\",\n//         \"color\": \"red\",\n//         \"color_tag\": \"1962\",\n//         \"color_coord\": [\n//             \"21\",\n//             \"23\",\n//             \"10\"\n//         ]\n//     },\n//     {\n//         \"score\": 1.6707111597061157,\n//         \"id\": \"981\",\n//         \"color\": \"yellow\",\n//         \"color_tag\": \"3100\",\n//         \"color_coord\": [\n//             \"28\",\n//             \"39\",\n//             \"10\",\n//             \"6\"\n//         ]\n//     }\n// ]\n// \n","res = client.query(\n    collection_name=\"test_collection\",\n    filter=\"ARRAY_CONTAINS_ALL(color_coord, [7, 8])\",\n    output_fields=[\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit=3\n)\n\nprint(res)\n\n# Output:\n# data: [\"{'id': 147, 'color': 'brown', 'color_tag': 1287, 'color_coord': [7, 8, 11, 0]}\", \"{'id': 257, 'color': 'white', 'color_tag': 3641, 'color_coord': [2, 8, 31, 7]}\", \"{'id': 280, 'color': 'orange', 'color_tag': 1072, 'color_coord': [22, 7, 8]}\"] , extra_info: {'cost': 0}\n","queryReq = QueryReq.builder()\n        .collectionName(\"test_collection\")\n        .filter(\"ARRAY_CONTAINS_ALL(color_coord, [7, 8])\")\n        .outputFields(Arrays.asList(\"id\", \"color\", \"color_tag\", \"color_coord\"))\n        .limit(3)\n        .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(queryResp.getQueryResults());\n\n// Output:\n// [\n//  QueryResp.QueryResult(entity={color=blue, color_tag=6939, id=246, color_coord=[1, 8, 27, 7]}), \n//  QueryResp.QueryResult(entity={color=brown, color_tag=6341, id=673, color_coord=[8, 7, 33, 20, 11]})\n// ]\n","res = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: \"ARRAY_CONTAINS_ALL(color_coord, [7, 8])\",\n    output_fields: [\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 0.8267516493797302,\n//         \"id\": \"913\",\n//         \"color\": \"brown\",\n//         \"color_tag\": \"8897\",\n//         \"color_coord\": [\n//             \"39\",\n//             \"31\",\n//             \"8\",\n//             \"29\",\n//             \"7\"\n//         ]\n//     },\n//     {\n//         \"score\": 0.6889009475708008,\n//         \"id\": \"826\",\n//         \"color\": \"blue\",\n//         \"color_tag\": \"4903\",\n//         \"color_coord\": [\n//             \"7\",\n//             \"25\",\n//             \"5\",\n//             \"12\",\n//             \"8\"\n//         ]\n//     },\n//     {\n//         \"score\": 0.5851659774780273,\n//         \"id\": \"167\",\n//         \"color\": \"blue\",\n//         \"color_tag\": \"1550\",\n//         \"color_coord\": [\n//             \"8\",\n//             \"27\",\n//             \"7\"\n//         ]\n//     }\n// ]\n// \n","res = client.query(\n    collection_name=\"test_collection\",\n    filter=\"ARRAY_CONTAINS_ANY(color_coord, [7, 8, 9])\",\n    output_fields=[\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit=3\n)\n\nprint(res)\n\n# Output:\n# data: [\"{'id': 0, 'color': 'white', 'color_tag': 2081, 'color_coord': [16, 7, 35, 5, 25]}\", \"{'id': 1, 'color': 'purple', 'color_tag': 4669, 'color_coord': [11, 9, 15, 38, 21]}\", \"{'id': 3, 'color': 'yellow', 'color_tag': 2612, 'color_coord': [0, 12, 22, 7]}\"] , extra_info: {'cost': 0}\n","queryReq = QueryReq.builder()\n        .collectionName(\"test_collection\")\n        .filter(\"ARRAY_CONTAINS_ANY(color_coord, [7, 8, 9])\")\n        .outputFields(Arrays.asList(\"id\", \"color\", \"color_tag\", \"color_coord\"))\n        .limit(3)\n        .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(queryResp.getQueryResults());\n\n// Output:\n// [\n//  QueryResp.QueryResult(entity={color=purple, color_tag=3687, id=1, color_coord=[22, 7, 29, 25]}), \n//  QueryResp.QueryResult(entity={color=black, color_tag=6107, id=8, color_coord=[8, 19, 31, 10]}), \n//  QueryResp.QueryResult(entity={color=blue, color_tag=3252, id=11, color_coord=[7, 16, 1]})\n// ]\n","res = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: \"ARRAY_CONTAINS_ANY(color_coord, [7, 8, 9])\",\n    output_fields: [\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 2.015894889831543,\n//         \"id\": \"260\",\n//         \"color\": \"green\",\n//         \"color_tag\": \"5320\",\n//         \"color_coord\": [\n//             \"1\",\n//             \"7\",\n//             \"33\",\n//             \"13\",\n//             \"23\"\n//         ]\n//     },\n//     {\n//         \"score\": 1.783075213432312,\n//         \"id\": \"593\",\n//         \"color\": \"orange\",\n//         \"color_tag\": \"4079\",\n//         \"color_coord\": [\n//             \"8\",\n//             \"19\"\n//         ]\n//     },\n//     {\n//         \"score\": 1.7713876962661743,\n//         \"id\": \"874\",\n//         \"color\": \"blue\",\n//         \"color_tag\": \"7029\",\n//         \"color_coord\": [\n//             \"14\",\n//             \"8\",\n//             \"15\"\n//         ]\n//     }\n// ]\n// \n","res = client.query(\n    collection_name=\"test_collection\",\n    filter=\"ARRAY_LENGTH(color_coord) == 4\",\n    output_fields=[\"id\", \"color\", \"color_tag\", \"color_coord\"],\n    limit=3\n)\n\nprint(res)\n\n# Output:\n# data: [\"{'id': 2, 'color': 'green', 'color_tag': 3676, 'color_coord': [26, 37, 30, 10]}\", \"{'id': 3, 'color': 'yellow', 'color_tag': 2612, 'color_coord': [0, 12, 22, 7]}\", \"{'id': 4, 'color': 'green', 'color_tag': 6912, 'color_coord': [4, 5, 19, 28]}\"] , extra_info: {'cost': 0}\n","queryReq = QueryReq.builder()\n        .collectionName(\"test_collection\")\n        .filter(\"ARRAY_LENGTH(color_coord) == 4\")\n        .outputFields(Arrays.asList(\"id\", \"color\", \"color_tag\", \"color_coord\"))\n        .limit(3)\n        .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(queryResp.getQueryResults()); \n\n// Output:\n// [\n//  QueryResp.QueryResult(entity={color=purple, color_tag=3687, id=1, color_coord=[22, 7, 29, 25]}),\n//  QueryResp.QueryResult(entity={color=yellow, color_tag=1990, id=3, color_coord=[26, 20, 15, 26]}),\n//  QueryResp.QueryResult(entity={color=purple, color_tag=3199, id=4, color_coord=[13, 19, 21, 30]})\n// ]\n","res = await client.search({\ncollection_name: \"test_collection\",\ndata: query_vectors,\nfilter: \"ARRAY_LENGTH(color_coord) == 4\",\noutput_fields: [\"id\", \"color\", \"color_tag\", \"color_coord\"],\nlimit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 2.0404388904571533,\n//         \"id\": \"439\",\n//         \"color\": \"orange\",\n//         \"color_tag\": \"7096\",\n//         \"color_coord\": [\n//             \"27\",\n//             \"34\",\n//             \"26\",\n//             \"39\"\n//         ]\n//     },\n//     {\n//         \"score\": 1.9059759378433228,\n//         \"id\": \"918\",\n//         \"color\": \"purple\",\n//         \"color_tag\": \"2903\",\n//         \"color_coord\": [\n//             \"28\",\n//             \"19\",\n//             \"36\",\n//             \"35\"\n//         ]\n//     },\n//     {\n//         \"score\": 1.8385567665100098,\n//         \"id\": \"92\",\n//         \"color\": \"yellow\",\n//         \"color_tag\": \"4693\",\n//         \"color_coord\": [\n//             \"1\",\n//             \"23\",\n//             \"2\",\n//             \"3\"\n//         ]\n//     }\n// ]\n// \n"],"headingContent":"Use Array Fields","anchorList":[{"label":"Use Array Fields","href":"Use-Array-Fields","type":1,"isActive":false},{"label":"Prerequisites","href":"Prerequisites","type":2,"isActive":false},{"label":"Prepare data with an array field","href":"Prepare-data-with-an-array-field","type":2,"isActive":false},{"label":"Set up MilvusClient","href":"Set-up-MilvusClient","type":2,"isActive":false},{"label":"Create a collection with an array field","href":"Create-a-collection-with-an-array-field","type":2,"isActive":false},{"label":"Create indexes","href":"Create-indexes","type":2,"isActive":false},{"label":"Insert data","href":"Insert-data","type":2,"isActive":false},{"label":"Load the collection","href":"Load-the-collection","type":2,"isActive":false},{"label":"Basic scalar filtering","href":"Basic-scalar-filtering","type":2,"isActive":false},{"label":"Advanced filtering","href":"Advanced-filtering","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"Reference on array filters","href":"Reference-on-array-filters","type":2,"isActive":false}]}