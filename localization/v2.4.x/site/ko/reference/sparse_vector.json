{"codeList":["{2: 0.33, 98: 0.72, ...}\n","[(2, 0.33), (98, 0.72), ...]\n","# Prepare entities with sparse vector representation\nimport numpy as np\nimport random\n\nrng = np.random.default_rng()\n\nnum_entities, dim = 10000, 10000\n\n# Generate random sparse rows with an average of 25 non-zero elements per row\nentities = [\n    {\n        \"scalar_field\": rng.random(),\n        # To represent a single sparse vector row, you can use:\n        # - Any of the scipy.sparse sparse matrices class family with shape[0] == 1\n        # - Dict[int, float]\n        # - Iterable[Tuple[int, float]]\n        \"sparse_vector\": {\n            d: rng.random() for d in random.sample(range(dim), random.randint(20, 30))\n        },\n    }\n    for _ in range(num_entities)\n]\n\n# print the first entity to check the representation\nprint(entities[0])\n\n# Output:\n# {\n#     'scalar_field': 0.520821523849214,\n#     'sparse_vector': {\n#         5263: 0.2639375518635271,\n#         3573: 0.34701499565746674,\n#         9637: 0.30856525997853057,\n#         4399: 0.19771651149001523,\n#         6959: 0.31025067641541815,\n#         1729: 0.8265339135915016,\n#         1220: 0.15303302147479103,\n#         7335: 0.9436728846033107,\n#         6167: 0.19929870545596562,\n#         5891: 0.8214617920371853,\n#         2245: 0.7852255053773395,\n#         2886: 0.8787982039149889,\n#         8966: 0.9000606703940665,\n#         4910: 0.3001170013981104,\n#         17: 0.00875671667413136,\n#         3279: 0.7003425473001098,\n#         2622: 0.7571360018373428,\n#         4962: 0.3901879090102064,\n#         4698: 0.22589525720196246,\n#         3290: 0.5510228492587324,\n#         6185: 0.4508413201390492\n#     }\n# }\n","from pymilvus import MilvusClient, DataType\n\n# Create a MilvusClient instance\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Create a collection with a sparse vector field\nschema = client.create_schema(\n    auto_id=True,\n    enable_dynamic_fields=True,\n)\n\nschema.add_field(field_name=\"pk\", datatype=DataType.VARCHAR, is_primary=True, max_length=100)\nschema.add_field(field_name=\"scalar_field\", datatype=DataType.DOUBLE)\n# For sparse vector, no need to specify dimension\nschema.add_field(field_name=\"sparse_vector\", datatype=DataType.SPARSE_FLOAT_VECTOR) # set `datatype` to `SPARSE_FLOAT_VECTOR`\n\nclient.create_collection(collection_name=\"test_sparse_vector\", schema=schema)\n","# Insert entities\nclient.insert(collection_name=\"test_sparse_vector\", data=entities)\n","# Index the collection\n\n# Prepare index params\nindex_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"sparse_vector\",\n    index_name=\"sparse_inverted_index\",\n    index_type=\"SPARSE_INVERTED_INDEX\", # the type of index to be created. set to `SPARSE_INVERTED_INDEX` or `SPARSE_WAND`.\n    metric_type=\"IP\", # the metric type to be used for the index. Currently, only `IP` (Inner Product) is supported.\n    params={\"drop_ratio_build\": 0.2}, # the ratio of small vector values to be dropped during indexing.\n)\n\n# Create index\nclient.create_index(collection_name=\"test_sparse_vector\", index_params=index_params)\n","# Load the collection into memory\nclient.load_collection(collection_name=\"test_sparse_vector\")\n\n# Perform ANN search on sparse vectors\n\n# for demo purpose we search for the last inserted vector\nquery_vector = entities[-1][\"sparse_vector\"]\n\nsearch_params = {\n    \"metric_type\": \"IP\",\n    \"params\": {\"drop_ratio_search\": 0.2}, # the ratio of small vector values to be dropped during search.\n}\n\nsearch_res = client.search(\n    collection_name=\"test_sparse_vector\",\n    data=[query_vector],\n    limit=3,\n    output_fields=[\"pk\", \"scalar_field\"],\n    search_params=search_params,\n)\n\nfor hits in search_res:\n    for hit in hits:\n        print(f\"hit: {hit}\")\n        \n# Output:\n# hit: {'id': '448458373272710786', 'distance': 7.220192909240723, 'entity': {'pk': '448458373272710786', 'scalar_field': 0.46767865218233806}}\n# hit: {'id': '448458373272708317', 'distance': 1.2287548780441284, 'entity': {'pk': '448458373272708317', 'scalar_field': 0.7315987515699472}}\n# hit: {'id': '448458373272702005', 'distance': 0.9848432540893555, 'entity': {'pk': '448458373272702005', 'scalar_field': 0.9871869181562156}}\n","# Perform a query by specifying filter expr\nfilter_query_res = client.query(\n    collection_name=\"test_sparse_vector\",\n    filter=\"scalar_field > 0.999\",\n)\n\nprint(filter_query_res[:2])\n\n# Output:\n# [{'pk': '448458373272701862', 'scalar_field': 0.9994093623822689, 'sparse_vector': {173: 0.35266244411468506, 400: 0.49995484948158264, 480: 0.8757831454277039, 661: 0.9931875467300415, 1040: 0.0965644046664238, 1728: 0.7478245496749878, 2365: 0.4351981580257416, 2923: 0.5505295395851135, 3181: 0.7396837472915649, 3848: 0.4428485333919525, 4701: 0.39119353890419006, 5199: 0.790219783782959, 5798: 0.9623121619224548, 6213: 0.453134149312973, 6341: 0.745091438293457, 6775: 0.27766478061676025, 6875: 0.017947908490896225, 8093: 0.11834774166345596, 8617: 0.2289179265499115, 8991: 0.36600416898727417, 9346: 0.5502803921699524}}, {'pk': '448458373272702421', 'scalar_field': 0.9990218525410719, 'sparse_vector': {448: 0.587817907333374, 1866: 0.0994109958410263, 2438: 0.8672442436218262, 2533: 0.8063794374465942, 2595: 0.02122959867119789, 2828: 0.33827054500579834, 2871: 0.1984412521123886, 2938: 0.09674275666475296, 3154: 0.21552987396717072, 3662: 0.5236313343048096, 3711: 0.6463911533355713, 4029: 0.4041993021965027, 7143: 0.7370485663414001, 7589: 0.37588241696357727, 7776: 0.436136394739151, 7962: 0.06377989053726196, 8385: 0.5808192491531372, 8592: 0.8865005970001221, 8648: 0.05727503448724747, 9071: 0.9450633525848389, 9161: 0.146037295460701, 9358: 0.1903032660484314, 9679: 0.3146636486053467, 9974: 0.8561339378356934, 9991: 0.15841573476791382}}]\n","# primary keys of entities that satisfy the filter\npks = [ret[\"pk\"] for ret in filter_query_res]\n\n# Perform a query by primary key\npk_query_res = client.query(\n    collection_name=\"test_sparse_vector\", filter=f\"pk == '{pks[0]}'\"\n)\n\nprint(pk_query_res)\n\n# Output:\n# [{'scalar_field': 0.9994093623822689, 'sparse_vector': {173: 0.35266244411468506, 400: 0.49995484948158264, 480: 0.8757831454277039, 661: 0.9931875467300415, 1040: 0.0965644046664238, 1728: 0.7478245496749878, 2365: 0.4351981580257416, 2923: 0.5505295395851135, 3181: 0.7396837472915649, 3848: 0.4428485333919525, 4701: 0.39119353890419006, 5199: 0.790219783782959, 5798: 0.9623121619224548, 6213: 0.453134149312973, 6341: 0.745091438293457, 6775: 0.27766478061676025, 6875: 0.017947908490896225, 8093: 0.11834774166345596, 8617: 0.2289179265499115, 8991: 0.36600416898727417, 9346: 0.5502803921699524}, 'pk': '448458373272701862'}]\n"],"headingContent":"Sparse Vector","anchorList":[{"label":"Sparse Vector","href":"Sparse-Vector","type":1,"isActive":false},{"label":"Prepare sparse vector embeddings","href":"Prepare-sparse-vector-embeddings","type":2,"isActive":false},{"label":"Create a collection with a sparse vector field","href":"Create-a-collection-with-a-sparse-vector-field","type":2,"isActive":false},{"label":"Insert entities with sparse vector embeddings","href":"Insert-entities-with-sparse-vector-embeddings","type":2,"isActive":false},{"label":"Index the collection","href":"Index-the-collection","type":2,"isActive":false},{"label":"Perform ANN search","href":"Perform-ANN-search","type":2,"isActive":false},{"label":"Perform scalar queries","href":"Perform-scalar-queries","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"FAQ","href":"FAQ","type":2,"isActive":false}]}