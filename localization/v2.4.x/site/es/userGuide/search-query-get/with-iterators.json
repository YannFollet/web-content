{"codeList":["from pymilvus import MilvusClient\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"\n)\n\n# 2. Create a collection\nclient.create_collection(\n    collection_name=\"quick_setup\",\n    dimension=5,\n)\n","import io.milvus.client.MilvusServiceClient;\nimport io.milvus.param.ConnectParam;\nimport io.milvus.param.highlevel.collection.CreateSimpleCollectionParam;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectParam connectParam = ConnectParam.newBuilder()\n        .withUri(CLUSTER_ENDPOINT)\n        .build();\n\nMilvusServiceClient client  = new MilvusServiceClient(connectParam);\n\n// 2. Create a collection\nCreateSimpleCollectionParam createCollectionParam = CreateSimpleCollectionParam.newBuilder()\n        .withCollectionName(\"quick_setup\")\n        .withDimension(5)\n        .build();\n\nclient.createCollection(createCollectionParam);\n","# 3. Insert randomly generated vectors \ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(10000):\n    current_color = random.choice(colors)\n    current_tag = random.randint(1000, 9999)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": f\"{current_color}_{str(current_tag)}\"\n    })\n\nprint(data[0])\n\n# Output\n#\n# {\n#     \"id\": 0,\n#     \"vector\": [\n#         -0.5705990742218152,\n#         0.39844925120642083,\n#         -0.8791287928610869,\n#         0.024163154953680932,\n#         0.6837669917169638\n#     ],\n#     \"color\": \"purple\",\n#     \"tag\": 7774,\n#     \"color_tag\": \"purple_7774\"\n# }\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=data,\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 10000,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(9990 more items hidden)\"\n#     ]\n# }\n","import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport io.milvus.param.R;\nimport io.milvus.param.dml.InsertParam;\nimport io.milvus.response.MutationResultWrapper;\nimport io.milvus.grpc.MutationResult;\n\n\n// 3. Insert randomly generated vectors into the collection\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JSONObject> data = new ArrayList<>();\n\nfor (int i=0; i<10000; i++) {\n    Random rand = new Random();\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    JSONObject row = new JSONObject();\n    row.put(\"id\", Long.valueOf(i));\n    row.put(\"vector\", Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat()));\n    row.put(\"color_tag\", current_color + \"_\" + String.valueOf(rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\nInsertParam insertParam = InsertParam.newBuilder()\n    .withCollectionName(\"quick_setup\")\n    .withRows(data)\n    .build();\n\nR<MutationResult> insertRes = client.insert(insertParam);\n\nif (insertRes.getStatus() != R.Status.Success.getCode()) {\n    System.err.println(insertRes.getMessage());\n}\n\nMutationResultWrapper wrapper = new MutationResultWrapper(insertRes.getData());\nSystem.out.println(wrapper.getInsertCount());\n","from pymilvus import Collection,connections\n\n# 4. Search with iterator\nconnections.connect(host=\"127.0.0.1\", port=19530)\ncollection = Collection(\"quick_setup\")\n\nquery_vectors = [[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]]\nsearch_params = {\n    \"metric_type\": \"IP\",\n    \"params\": {\"nprobe\": 10}\n}\n\niterator = collection.search_iterator(\n    data=query_vectors,\n    anns_field=\"vector\",\n    batch_size=10,\n    param=search_params,\n    output_fields=[\"color_tag\"],\n    limit=300\n)\n# search 300 entities totally with 10 entities per page\n\nresults = []\n\nwhile True:\n    result = iterator.next()\n    if not result:\n        iterator.close()\n        break\n        \n    results.extend(result)\n    \n    for hit in result:\n        results.append(hit.to_dict())\n\nprint(results)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 1756,\n#         \"distance\": 2.0642056465148926,\n#         \"entity\": {\n#             \"color_tag\": \"black_9109\"\n#         }\n#     },\n#     {\n#         \"id\": 6488,\n#         \"distance\": 1.9437453746795654,\n#         \"entity\": {\n#             \"color_tag\": \"purple_8164\"\n#         }\n#     },\n#     {\n#         \"id\": 3338,\n#         \"distance\": 1.9107104539871216,\n#         \"entity\": {\n#             \"color_tag\": \"brown_8121\"\n#         }\n#     }\n# ]\n","import io.milvus.param.dml.QueryIteratorParam;\nimport io.milvus.param.dml.SearchIteratorParam;\nimport io.milvus.response.QueryResultsWrapper;\nimport io.milvus.orm.iterator.SearchIterator;\n\n// 4. Search with iterators\nSearchIteratorParam iteratorParam = SearchIteratorParam.newBuilder()\n    .withCollectionName(\"quick_setup\")\n    .withVectorFieldName(\"vector\")\n    // Use withFloatVectors() in clusters compatible with Milvus 2.4.x\n    .withVectors(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f))\n    .withBatchSize(10L)\n    .withParams(\"{\\\"metric_type\\\": \\\"COSINE\\\", \\\"params\\\": {\\\"level\\\": 1}}\")\n    .build();\n        \n\nR<SearchIterator> searchIteratorRes = client.searchIterator(iteratorParam);\n\nif (searchIteratorRes.getStatus() != R.Status.Success.getCode()) {\n    System.err.println(searchIteratorRes.getMessage());\n}\n\nSearchIterator searchIterator = searchIteratorRes.getData();\nList<QueryResultsWrapper.RowRecord> results = new ArrayList<>();\n\nwhile (true) {\n    List<QueryResultsWrapper.RowRecord> batchResults = searchIterator.next();\n    if (batchResults.isEmpty()) {\n        searchIterator.close();\n        break;\n    }\n    for (QueryResultsWrapper.RowRecord rowRecord : batchResults) {\n        results.add(rowRecord);\n    }\n}\n\nSystem.out.println(results.size());\n","# 6. Query with iterator\niterator = collection.query_iterator(\n    batch_size=10, # Controls the size of the return each time you call next()\n    expr=\"color_tag like \\\"brown_8\\\"\",\n    output_fields=[\"color_tag\"]\n)\n\nresults = []\n\nwhile True:\n    result = iterator.next()\n    if not result:\n        iterator.close()\n        break\n        \n    results.extend(result)\n    \n# 8. Check the search results\nprint(len(results))\n\nprint(results[:3])\n\n# Output\n#\n# [\n#     {\n#         \"color_tag\": \"brown_8785\",\n#         \"id\": 94\n#     },\n#     {\n#         \"color_tag\": \"brown_8568\",\n#         \"id\": 176\n#     },\n#     {\n#         \"color_tag\": \"brown_8721\",\n#         \"id\": 289\n#     }\n# ]\n","import io.milvus.param.dml.QueryIteratorParam;\nimport io.milvus.orm.iterator.QueryIterator;\n\n// 5. Query with iterators\n\ntry {\n    Files.write(Path.of(\"results.json\"), JSON.toJSONString(new ArrayList<>()).getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n} catch (Exception e) {\n    // TODO: handle exception\n    e.printStackTrace();\n}\n\nQueryIteratorParam queryIteratorParam = QueryIteratorParam.newBuilder()\n    .withCollectionName(\"quick_setup\")\n    .withExpr(\"color_tag like \\\"brown_8%\\\"\")\n    .withBatchSize(50L)\n    .addOutField(\"vector\")\n    .addOutField(\"color_tag\")\n    .build();\n\nR<QueryIterator> queryIteratRes = client.queryIterator(queryIteratorParam);\n\nif (queryIteratRes.getStatus() != R.Status.Success.getCode()) {\n    System.err.println(queryIteratRes.getMessage());\n}\n\nQueryIterator queryIterator = queryIteratRes.getData();\n\nwhile (true) {\n    List<QueryResultsWrapper.RowRecord> batchResults = queryIterator.next();\n    if (batchResults.isEmpty()) {\n        queryIterator.close();\n        break;\n    }\n\n    String jsonString = \"\";\n    List<JSONObject> jsonObject = new ArrayList<>();\n    try {\n        jsonString = Files.readString(Path.of(\"results.json\"));\n        jsonObject = JSON.parseArray(jsonString).toJavaList(null);\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    for (QueryResultsWrapper.RowRecord queryResult : batchResults) {\n        JSONObject row = new JSONObject();\n        row.put(\"id\", queryResult.get(\"id\"));\n        row.put(\"vector\", queryResult.get(\"vector\"));\n        row.put(\"color_tag\", queryResult.get(\"color_tag\"));\n        jsonObject.add(row);\n    }\n\n    try {\n        Files.write(Path.of(\"results.json\"), JSON.toJSONString(jsonObject).getBytes(), StandardOpenOption.WRITE);\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}\n"],"headingContent":"With Iterators","anchorList":[{"label":"Con iteradores","href":"With-Iterators","type":1,"isActive":false},{"label":"Visión general","href":"Overview","type":2,"isActive":false},{"label":"Preparativos","href":"Preparations","type":2,"isActive":false},{"label":"Búsqueda con iterador","href":"Search-with-iterator","type":2,"isActive":false},{"label":"Consulta con un iterador","href":"Query-with-an-iterator","type":2,"isActive":false}]}