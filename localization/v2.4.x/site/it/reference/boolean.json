{"codeList":["Expr = LogicalExpr | NIL\nLogicalExpr = LogicalExpr BinaryLogicalOp LogicalExpr \n              | UnaryLogicalOp LogicalExpr\n              | \"(\" LogicalExpr \")\"\n              | SingleExpr;\nBinaryLogicalOp = \"&&\" | \"and\" | \"||\" | \"or\";\nUnaryLogicalOp = \"not\";\nSingleExpr = TermExpr | CompareExpr;\nTermExpr = IDENTIFIER \"in\" ConstantArray;\nConstant = INTEGER | FLOAT\nConstantExpr = Constant\n               | ConstantExpr BinaryArithOp ConstantExpr\n               | UnaryArithOp ConstantExpr;\n                                                          \nConstantArray = \"[\" ConstantExpr { \",\" ConstantExpr } \"]\";\nUnaryArithOp = \"+\" | \"-\"\nBinaryArithOp = \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"**\";\nCompareExpr = IDENTIFIER CmpOp IDENTIFIER\n              | IDENTIFIER CmpOp ConstantExpr\n              | ConstantExpr CmpOp IDENTIFIER\n              | ConstantExpr CmpOpRestricted IDENTIFIER CmpOpRestricted ConstantExpr;\nCmpOpRestricted = \"<\" | \"<=\";\nCmpOp = \">\" | \">=\" | \"<\" | \"<=\" | \"==\"| \"!=\";\nMatchOp = \"like\" | \"LIKE\";\nJsonArrayOps = JsonDefs \"(\" IDENTIFIER \",\" JsonExpr | JsonArray \")\";\nJsonArrayDefs = \"json_contains\" | \"JSON_CONTAINS\" \n           | \"json_contains_all\" | \"JSON_CONTAINS_ALL\" \n           | \"json_contains_any\" | \"JSON_CONTAINS_ANY\";\nJsonExpr =  Constant | ConstantArray | STRING | BOOLEAN;\nJsonArray = \"[\" JsonExpr { \",\" JsonExpr } \"]\";\nArrayOps = ArrayDefs \"(\" IDENTIFIER \",\" ArrayExpr | Array \")\";\nArrayDefs = \"array_contains\" | \"ARRAY_CONTAINS\" \n           | \"array_contains_all\" | \"ARRAY_CONTAINS_ALL\" \n           | \"array_contains_any\" | \"ARRAY_CONTAINS_ANY\"\n           | \"array_length\"       | \"ARRAY_LENGTH\";\nArrayExpr =  Constant | ConstantArray | STRING | BOOLEAN;\nArray = \"[\" ArrayExpr { \",\" ArrayExpr } \"]\";\n","\"int64 > 0\"\n","\"0 < int64 < 400\"\n","\"500 <= int64 < 1000\"\n","VARCHAR > \"str1\"\n","\"(int64 > 0 && int64 < 400) or (int64 > 500 && int64 < 1000)\"\n","\"int64 not in [1, 2, 3]\"\n","VARCHAR not in [\"str1\", \"str2\"]\n","\"int64 in [1, 2, 3] and float != 2\"\n","\"int64 == 0 || int64 == 1 || int64 == 2\"\n","\"200+300 < int64 <= 500+500\"\n","VARCHAR like \"prefix%\"\nVARCHAR like \"%suffix\"\nVARCHAR like \"%middle%\"\nVARCHAR like \"_suffix\"\n","# {\"x\": [1,2,3]}\njson_contains(x, 1) # ==> true\njson_contains(x, \"a\") # ==> false\n    \n# {\"x\": [[1,2,3], [4,5,6], [7,8,9]]}\njson_contains(x, [1,2,3]) # ==> true\njson_contains(x, [3,2,1]) # ==> false\n","# {\"x\": [1,2,3,4,5,7,8]}\njson_contains_all(x, [1,2,8]) # ==> true\njson_contains_all(x, [4,5,6]) # ==> false 6 is not exists\n","# {\"x\": [1,2,3,4,5,7,8]}\njson_contains_any(x, [1,2,8]) # ==> true\njson_contains_any(x, [4,5,6]) # ==> true\njson_contains_any(x, [6,9]) # ==> false\n","# 'int_array': [1,2,3]\narray_contains(int_array, 1) # ==> true\narray_contains(int_array, \"a\") # ==> false\n","# \"int_array\": [1,2,3,4,5,7,8]\narray_contains_all(int_array, [1,2,8]) # ==> true\narray_contains_all(int_array, [4,5,6]) # ==> false 6 is not exists\n","# \"int_array\": [1,2,3,4,5,7,8]\narray_contains_any(int_array, [1,2,8]) # ==> true\narray_contains_any(int_array, [4,5,6]) # ==> true\narray_contains_any(int_array, [6,9]) # ==> false\n","# \"int_array\": [1,2,3,4,5,7,8]\narray_length(int_array) # ==> 7\n"],"headingContent":"Scalar Filtering Rules","anchorList":[{"label":"Scalar Filtering Rules","href":"Scalar-Filtering-Rules","type":1,"isActive":false},{"label":"Overview","href":"Overview","type":2,"isActive":false},{"label":"Operators","href":"Operators","type":2,"isActive":false},{"label":"Operator precedence and associativity","href":"Operator-precedence-and-associativity","type":2,"isActive":false},{"label":"Usage","href":"Usage","type":2,"isActive":false},{"label":"Whatâ€™s next","href":"Whats-next","type":2,"isActive":false}]}